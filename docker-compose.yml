services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: style_transfer_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: style_transfer_db
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_USER: django_user
      MYSQL_PASSWORD: django_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis - Celery Broker
  redis:
    image: redis:7-alpine
    container_name: style_transfer_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django API Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: style_transfer_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      bash -c "python manage.py makemigrations &&
               python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               python manage.py runserver 0.0.0.0:8000"

  # Celery Worker - Procesa las tareas de imagen
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: style_transfer_celery_worker
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config worker --loglevel=info --concurrency=2

  # Celery Beat - Tareas programadas (limpieza, stats)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: style_transfer_celery_beat
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A config beat --loglevel=info

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: style_transfer_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    depends_on:
      - backend
    command: npm run dev

volumes:
  mysql_data:
  media_files:
  redis_data:

networks:
  default:
    name: style_transfer_network
